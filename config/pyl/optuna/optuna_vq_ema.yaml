# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/ppl_epoch"

study_name: 1.18.VQ_EMA

experiment:
  name: ${study_name}_hp_search
  wandb_logger:
    tags: ['hp_search', '${study_name}', '1.18']

dm:
  batch_size: 25000 #25k on rbgquanta2

trainer:
  check_val_every_n_epoch: 1
  # limit_train_batches: 5
  # max_epochs: 5
  num_sanity_val_steps: 1
  max_time: "00:08:00:00"

callbacks:
  es_cb:
    monitor: ${optimized_metric}
    mode: min
    patience: 8
    strict: True

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: ${study_name}

    # number of parallel workers
    n_jobs: 8

    # 'minimize' or 'maximize' the objective
    direction: minimize

    # total number of runs that will be executed
    n_trials: 40

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      consider_prior: True
      prior_weight: 1.0
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 8 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      lm.model.vq_cfg.codebook_dim: choice(4, 16, 64)
      lm.model.vq_cfg.codebook_size: choice(10, 20, 40, 80)
      lm.model.vq_cfg.decay: tag(log, interval(0.4, 0.9))
      # lm.model.vq_cfg.commitment_weight: tag(log, interval(1.0, 10.0))
      # lm.model.vq_cfg.orthogonal_reg_weight: tag(log, interval(5.0, 25.0))
      # lm.model.vq_cfg.sample_codebook_temp: tag(log, interval(0.001, 0.5))
      # # lm.model.augment_eps: tag(log, interval(0.001, 0.3))
      # lm.model.dropout: tag(log, interval(0.001, 0.4))